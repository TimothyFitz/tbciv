// Generated by CoffeeScript 1.3.1
(function() {
  var Map, Tile, click_dist, random_choice, tile_data, tile_size,
    __slice = [].slice;

  tile_size = 60;

  Tile = (function() {

    Tile.name = 'Tile';

    function Tile(x, y, name) {
      this.x = x;
      this.y = y;
      this.name = name;
      this.data = tile_data[this.name];
      this.icon = random_choice(this.data.icons);
      this.fogged = true;
    }

    Tile.prototype.div = function() {
      this.bind($('<div>').addClass('tile'));
      return this.update();
    };

    Tile.prototype.update = function($sel) {
      var tx, ty;
      $sel = $sel ? $sel : this.sel;
      tx = -(this.icon % 20) * tile_size;
      ty = -(Math.floor(this.icon / 20)) * tile_size;
      $sel.data('tile', this);
      $sel.toggleClass('fogged', this.fogged);
      return $sel.css({
        backgroundPosition: tx.toString() + " " + ty.toString(),
        left: this.x * 60,
        top: this.y * 60
      });
    };

    Tile.prototype.bind = function($sel) {
      return this.sel = $sel;
    };

    Tile.prototype.act = function() {
      if (this.fogged) {
        this.fogged = false;
        return this.update();
      }
    };

    return Tile;

  })();

  Map = (function() {

    Map.name = 'Map';

    function Map(width, height) {
      var n;
      this.width = width;
      this.height = height;
      this.tiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (n = _i = 0, _ref = this.height; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Array(this.width));
        }
        return _results;
      }).call(this);
    }

    Map.prototype.create_tile = function() {
      var args, x, y;
      x = arguments[0], y = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return this.set(x, y, (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(Tile, [x, y].concat(__slice.call(args)), function(){}));
    };

    Map.prototype.get = function(x, y) {
      return this.tiles[y][x];
    };

    Map.prototype.set = function(x, y, item) {
      return this.tiles[y][x] = item;
    };

    return Map;

  })();

  tile_data = {
    grass: {
      icons: [20],
      pop: 10
    },
    forest: {
      icons: [204, 205, 206, 207],
      wood: 10
    },
    mountain: {
      icons: [208],
      ore: 10
    }
  };

  click_dist = function(e1, e2) {
    var dx, dy;
    dx = e1.screenX - e2.screenX;
    dy = e1.screenY - e2.screenY;
    return Math.sqrt(dx * dx + dy * dy);
  };

  random_choice = function(list) {
    return list[Math.floor(Math.random() * list.length)];
  };

  window.ui = {};

  window.game = {};

  window.game_start = function() {
    var tile, tile_name, x, y, _i, _j;
    game.map = new Map(20, 20);
    for (x = _i = 0; _i <= 20; x = ++_i) {
      for (y = _j = 0; _j <= 20; y = ++_j) {
        tile_name = random_choice(["grass", "grass", "grass", "grass", "forest", "forest", "mountain"]);
        tile = game.map.create_tile(x, y, tile_name);
        $('.map').append(tile.div());
      }
    }
    $('.map').delegate('.tile', 'mousedown', function(first) {
      var $this,
        _this = this;
      $this = $(this);
      if ($this.hasClass('selected')) {
        $this.addClass('depressed');
      }
      return $(window).one('mouseup', function(second) {
        if (click_dist(first, second) < 10) {
          if ($this.hasClass('depressed')) {
            $this.data('tile').act();
          } else {
            $('.map .tile.selected').removeClass('selected');
            $this.addClass('selected');
          }
        }
        return $this.removeClass('depressed');
      });
    });
    return ui.map = new EasyScroller($('.map').get(0, {
      scrollingX: true,
      scrollingY: true,
      zooming: true,
      minZoom: 0.25,
      maxZoom: 4
    }));
  };

}).call(this);
